// inspired by https://github.com/poanetwork/poa-network-consensus-contracts/blob/master/scripts/poa-bytecode.js
// and https://github.com/jbaylina/ERC820/tree/master/js

const fs = require('fs');
const solc = require('solc');
const Web3 = require('web3');
const Tx = require('ethereumjs-tx');
const ethUtils = require('ethereumjs-util');

const web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));

main();

async function main() {
	console.log('compilation...');
	const compiled = solc.compile({
		sources: {
			'': fs.readFileSync('../contracts/Lab10ATSSwap.sol').toString()
		}
	}, 1, function (path) {
		console.log(`readCallback for ${path}`);
		return {contents: fs.readFileSync('../contracts/' + path).toString()}
	});
//	console.log(`compiled: ${JSON.stringify(compiled)}`);
	const bytecode = compiled.contracts[':Lab10ATSSwap'].bytecode;

    //const abi = JSON.parse(compiled.contracts[':Lab10ATSSwap'].interface);
//	const contract = new web3.eth.Contract(abi);
//	const deploy = await contract.deploy({data: '0x' + bytecode, arguments: []});
//	const postDeployBytecode = await deploy.encodeABI();


    //console.log('bytecode:');
    //console.log('');
    //console.log(bytecode);

    const rawTx = {
        nonce: 0,
        gasPrice: 100 * 1E9,
        gasLimit: 800000,
        value: 0,
        v: 27,
        r: '0x1010101010101010101010101010101010101010101010101010101010101010',
        s: '0x0101010101010101010101010101010101010101010101010101010101010101',
        data: '0x' + bytecode
        //data: '0x608060405260018054600160a060020a031916905534801561002057600080fd5b5060008054600160a060020a0319163317905560408051808201909152601581527f455243373737546f6b656e73526563697069656e740000000000000000000000602082015261007a903064010000000061007f810204565b6101e1565b6000826040516020018082805190602001908083835b602083106100b45780518252601f199092019160209182019101610095565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106101175780518252601f1990920191602091820191016100f8565b5181516020939093036101000a6000190180199091169216919091179052604080519190930181900381207f29965a1d00000000000000000000000000000000000000000000000000000000825230600483015260248201819052600160a060020a0388166044830152925192955073820b586c8c28125366c998641b09dcbe7d4cbf0694506329965a1d9350606480820193600093509182900301818387803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b50505050505050565b610356806101f06000396000f30060806040526004361061006b5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166223de2981146100ba57806319ab453c14610173578063375dadba146101945780636315d7d0146101bb5780638da5cb5b146101ec575b600054600160a060020a0316331461008257600080fd5b3415156100b8576040513390303180156108fc02916000818181858888f193505050501580156100b6573d6000803e3d6000fd5b505b005b3480156100c657600080fd5b50604080516020601f6084356004818101359283018490048402850184019095528184526100b894600160a060020a03813581169560248035831696604435909316956064359536959460a49493919091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506102019650505050505050565b34801561017f57600080fd5b506100b8600160a060020a03600435166102aa565b3480156101a057600080fd5b506101a9610307565b60408051918252519081900360200190f35b3480156101c757600080fd5b506101d061030c565b60408051600160a060020a039092168252519081900360200190f35b3480156101f857600080fd5b506101d061031b565b600154600090600160a060020a0316331461021b57600080fd5b50604051604b840290600160a060020a0387169082156108fc029083906000818181858888f19350505050158015610257573d6000803e3d6000fd5b5060408051600160a060020a03881681526020810186905280820183905290517f3a9a9f34f5831e9c8ecb66ab3aa308b2ff31eaca434615f6c9cadc656a9af71c9181900360600190a150505050505050565b600054600160a060020a031633146102c157600080fd5b600154600160a060020a031615156102d857600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b604b81565b600154600160a060020a031681565b600054600160a060020a0316815600a165627a7a7230582031be282dd04feeeaa4b0075f213134008b36e76c55180d061f4e8368e19c6b090029'}
    };
    const tx = new Tx(rawTx);

    const senderAddr = ethUtils.toChecksumAddress('0x' + tx.getSenderAddress().toString('hex'));

    const txToSend = '0x' + tx.serialize().toString('hex');

    const txCost = web3.utils.fromWei(tx.getUpfrontCost().toString());

    console.log(`
    
===========================
    
# here's the deal:
# sender address: ${senderAddr}
# tx cost: ${txCost} ATS
# fuel sender with:
web3.eth.sendTransaction({to: '${senderAddr}', value: web3.utils.toWei('${txCost}')})

# create with:
web3.eth.sendSignedTransaction('${txToSend}')

# After deploying, you need to invoke init() from the account you want to make owner.
# Hurry up, otherwise somebody else may do so ;-)

# ERC-820 needs to be deployed when calling init().

# Enjoy!
    `)
}
